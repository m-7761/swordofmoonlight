
#ifndef DX_D3D9C_INCLUDED
#define DX_D3D9C_INCLUDED

#include "dx.ddraw.h"

#undef D3DFVF_POSITION_MASK
#define D3DFVF_POSITION_MASK 0x400E //2021

namespace D3D9C //dx.d3d9c.h
{
	//REMOVE ALL OF THIS (to dx.ddraw.h)

	enum{ ibuffersN=6*1 };

	//REMINDER: som_db.exe crashes without
	//doEmulate, otherwise I'd like it to
	//be removed ASAP
	static const bool doEmulate = true; //fake enumeration
	static const bool isDebugging = false; //load debug dll

	extern int is_needed_to_initialize();

	extern bool updating_texture(DDRAW::IDirectDrawSurface7*,int force);

	//!simulation of DirectDrawEnumerateExA by way of Direct3D9
	HRESULT WINAPI DirectDrawEnumerateExA(DX::LPDDENUMCALLBACKEXA,LPVOID,DWORD);	

	//!returns an IDirect3D9Ex implementation of the IDirectDraw7 interface
	HRESULT WINAPI DirectDrawCreateEx(GUID FAR*,LPVOID*,REFIID,IUnknown FAR*);
				  
	typedef ::IDirect3D9*(WINAPI*Create9)(UINT);
	typedef HRESULT(WINAPI*Create9Ex)(UINT,::IDirect3D9Ex**);
	struct D3D9ON12_ARGS
	{
		BOOL Enable9On12;
		IUnknown *pD3D12Device,*ppD3D12Queues[2]; //MAX_D3D9ON12_QUEUES
		UINT NumQueues,NodeMask;
	};
	typedef HRESULT(WINAPI*Create9On12Ex)(UINT,D3D9ON12_ARGS*,UINT,IDirect3D9Ex**);

	namespace DLL //d3d9.dll
	{		
		extern D3D9C::Create9 Direct3DCreate9;  
		extern D3D9C::Create9Ex Direct3DCreate9Ex; //Vista
		extern D3D9C::Create9On12Ex Direct3DCreate9On12Ex; //2021
	}
};

#ifdef DIRECTX_INCLUDED //PCH
extern struct dx_d3d9c_stereoVD_t //dx.d3d9X.cpp
{	
	typedef std::map<DWORD,IDirect3DVertexDeclaration9*> 
	map_t;
	map_t map;	
	map_t::mapped_type operator()(DWORD fvf);
	map_t::mapped_type _create(DWORD fvf);
	void clear_and_Release();

}dx_d3d9c_stereoVD;
#endif

//Note: These interfaces should have the same memory footprint as the 
//ones defined in dx.ddraw.h. Add new members to dx.ddraw.h if needed

#pragma push_macro("PURE") 
#pragma push_macro("STDMETHOD")
#pragma push_macro("STDMETHOD_") //for DirectX headers compatability

#define PURE
#define STDMETHOD(method) HRESULT STDMETHODCALLTYPE method //virtual HRESULT STDMETHODCALLTYPE method
#define	STDMETHOD_(type,method) type STDMETHODCALLTYPE method //virtual type STDMETHODCALLTYPE method
		
namespace D3D9C{
class IDirectDraw : public DDRAW::IDirectDraw
{
DDRAW_INTRAFACE(IDirectDraw)

	/*** IUnknown methods ***/
	STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
};}

namespace D3D9C{
class IDirectDraw4 : public DDRAW::IDirectDraw4
{
DDRAW_INTRAFACE(IDirectDraw4)

	/*** IUnknown methods ***/
//  STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
//  STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
//  STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDraw methods ***/
//  STDMETHOD(Compact)(THIS) PURE;
//  STDMETHOD(CreateClipper)(THIS_ DWORD, DX::LPDIRECTDRAWCLIPPER FAR*, IUnknown FAR * ) PURE;
//  STDMETHOD(CreatePalette)(THIS_ DWORD, LPPALETTEENTRY, DX::LPDIRECTDRAWPALETTE FAR*, IUnknown FAR * ) PURE;
//  STDMETHOD(CreateSurface)(THIS_  DX::LPDDSURFACEDESC2, DX::LPDIRECTDRAWSURFACE4 FAR *, IUnknown FAR *) PURE;
//  STDMETHOD(DuplicateSurface)( THIS_ DX::LPDIRECTDRAWSURFACE4, DX::LPDIRECTDRAWSURFACE4 FAR * ) PURE;
//  STDMETHOD(EnumDisplayModes)( THIS_ DWORD, DX::LPDDSURFACEDESC2, LPVOID, DX::LPDDENUMMODESCALLBACK2 ) PURE;
//  STDMETHOD(EnumSurfaces)(THIS_ DWORD, DX::LPDDSURFACEDESC2, LPVOID,DX::LPDDENUMSURFACESCALLBACK2 ) PURE;
//  STDMETHOD(FlipToGDISurface)(THIS) PURE;
//  STDMETHOD(GetCaps)( THIS_ DX::LPDDCAPS, DX::LPDDCAPS) PURE;
//  STDMETHOD(GetDisplayMode)( THIS_ DX::LPDDSURFACEDESC2) PURE;
//  STDMETHOD(GetFourCCCodes)(THIS_  LPDWORD, LPDWORD ) PURE;
//  STDMETHOD(GetGDISurface)(THIS_ DX::LPDIRECTDRAWSURFACE4 FAR *) PURE;
//  STDMETHOD(GetMonitorFrequency)(THIS_ LPDWORD) PURE;
//  STDMETHOD(GetScanLine)(THIS_ LPDWORD) PURE;
//  STDMETHOD(GetVerticalBlankStatus)(THIS_ LPBOOL ) PURE;
//  STDMETHOD(Initialize)(THIS_ GUID FAR *) PURE;
//  STDMETHOD(RestoreDisplayMode)(THIS) PURE;
//  STDMETHOD(SetCooperativeLevel)(THIS_ HWND, DWORD) PURE;
//  STDMETHOD(SetDisplayMode)(THIS_ DWORD, DWORD,DWORD, DWORD, DWORD) PURE;
//  STDMETHOD(WaitForVerticalBlank)(THIS_ DWORD, HANDLE ) PURE;
	/*** Added in the v2 interface ***/
//  STDMETHOD(GetAvailableVidMem)(THIS_ DX::LPDDSCAPS2, LPDWORD, LPDWORD) PURE;
    /*** Added in the V4 Interface ***/
//  STDMETHOD(GetSurfaceFromDC) (THIS_ HDC, DX::LPDIRECTDRAWSURFACE4 *) PURE;
//  STDMETHOD(RestoreAllSurfaces)(THIS) PURE;
//  STDMETHOD(TestCooperativeLevel)(THIS) PURE;
//  STDMETHOD(GetDeviceIdentifier)(THIS_ DX::LPDDDEVICEIDENTIFIER, DWORD ) PURE;    
};}

namespace D3D9C{
class IDirectDraw7 : public DDRAW::IDirectDraw7
{
DDRAW_INTRAFACE(IDirectDraw7)

	/*** IUnknown methods ***/
	STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDraw methods ***/
//  STDMETHOD(Compact)(THIS) PURE;
	STDMETHOD(CreateClipper)(THIS_ DWORD, DX::LPDIRECTDRAWCLIPPER FAR*, IUnknown FAR * ) PURE;
	STDMETHOD(CreatePalette)(THIS_ DWORD, LPPALETTEENTRY, DX::LPDIRECTDRAWPALETTE FAR*, IUnknown FAR * ) PURE;
	STDMETHOD(CreateSurface)(THIS_  DX::LPDDSURFACEDESC2, DX::LPDIRECTDRAWSURFACE7 FAR *, IUnknown FAR *) PURE;
//  STDMETHOD(DuplicateSurface)( THIS_ DX::LPDIRECTDRAWSURFACE7, DX::LPDIRECTDRAWSURFACE7 FAR * ) PURE;
	STDMETHOD(EnumDisplayModes)( THIS_ DWORD, DX::LPDDSURFACEDESC2, LPVOID, DX::LPDDENUMMODESCALLBACK2 ) PURE;
//  STDMETHOD(EnumSurfaces)(THIS_ DWORD, DX::LPDDSURFACEDESC2, LPVOID,DX::LPDDENUMSURFACESCALLBACK7 ) PURE;
//  STDMETHOD(FlipToGDISurface)(THIS) PURE;
	STDMETHOD(GetCaps)( THIS_ DX::LPDDCAPS, DX::LPDDCAPS) PURE;
//  STDMETHOD(GetDisplayMode)( THIS_ DX::LPDDSURFACEDESC2) PURE;
//  STDMETHOD(GetFourCCCodes)(THIS_  LPDWORD, LPDWORD ) PURE;
//  STDMETHOD(GetGDISurface)(THIS_ DX::LPDIRECTDRAWSURFACE7 FAR *) PURE;
//  STDMETHOD(GetMonitorFrequency)(THIS_ LPDWORD) PURE;
//  STDMETHOD(GetScanLine)(THIS_ LPDWORD) PURE;
//  STDMETHOD(GetVerticalBlankStatus)(THIS_ LPBOOL ) PURE;
//  STDMETHOD(Initialize)(THIS_ GUID FAR *) PURE;
//	STDMETHOD(RestoreDisplayMode)(THIS) PURE;
	STDMETHOD(SetCooperativeLevel)(THIS_ HWND, DWORD) PURE;
//  STDMETHOD(SetDisplayMode)(THIS_ DWORD, DWORD,DWORD, DWORD, DWORD) PURE;
	STDMETHOD(WaitForVerticalBlank)(THIS_ DWORD, HANDLE ) PURE;
    /*** Added in the v2 interface ***/
//  STDMETHOD(GetAvailableVidMem)(THIS_ DX::LPDDSCAPS2, LPDWORD, LPDWORD) PURE;
    /*** Added in the V4 Interface ***/
//  STDMETHOD(GetSurfaceFromDC) (THIS_ HDC, DX::LPDIRECTDRAWSURFACE7 *) PURE;
//  STDMETHOD(RestoreAllSurfaces)(THIS) PURE;
//  STDMETHOD(TestCooperativeLevel)(THIS) PURE;
//  STDMETHOD(GetDeviceIdentifier)(THIS_ DX::LPDDDEVICEIDENTIFIER2, DWORD ) PURE;
//  STDMETHOD(StartModeTest)(THIS_ LPSIZE, DWORD, DWORD ) PURE;
//  STDMETHOD(EvaluateMode)(THIS_ DWORD, DWORD * ) PURE;
};}

namespace D3D9C{ //EXPERIMENTAL
typedef DDRAW::IDirectDrawClipper IDirectDrawClipper;
}

namespace D3D9C{
class IDirectDrawPalette : public DDRAW::IDirectDrawPalette
{
DDRAW_INTRAFACE(IDirectDrawPalette) //public

	/*** IUnknown methods ***/
	STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawPalette methods ***/
//	STDMETHOD(GetCaps)(THIS_ LPDWORD) PURE;
//	STDMETHOD(GetEntries)(THIS_ DWORD,DWORD,DWORD,LPPALETTEENTRY) PURE;
//	STDMETHOD(Initialize)(THIS_ DX::LPDIRECTDRAW, DWORD, LPPALETTEENTRY) PURE;
//	STDMETHOD(SetEntries)(THIS_ DWORD,DWORD,DWORD,LPPALETTEENTRY) PURE;
};}


namespace D3D9C{
class IDirectDrawGammaControl : public DDRAW::IDirectDrawGammaControl
{
DDRAW_INTRAFACE(IDirectDrawGammaControl) //public
	
	    /*** IUnknown methods ***/
//  STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
//  STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
//  STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawGammaControl methods ***/
    STDMETHOD(GetGammaRamp)(THIS_ DWORD, DX::LPDDGAMMARAMP) PURE;
	STDMETHOD(SetGammaRamp)(THIS_ DWORD, DX::LPDDGAMMARAMP) PURE;
};}

namespace D3D9C{
class IDirectDrawSurface : public DDRAW::IDirectDrawSurface
{
DDRAW_INTRAFACE(IDirectDrawSurface)

	/*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
	/*** IDirectDrawSurface methods ***/
	STDMETHOD(Blt)(THIS_ LPRECT,DX::LPDIRECTDRAWSURFACE, LPRECT,DWORD, DX::LPDDBLTFX) PURE;
};}

namespace D3D9C{
class IDirectDrawSurface4 : public DDRAW::IDirectDrawSurface4
{
DDRAW_INTRAFACE(IDirectDrawSurface4)

	/*** IUnknown methods ***/
//  STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
//  STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
//  STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawSurface methods ***/
//  STDMETHOD(AddAttachedSurface)(THIS_ DX::LPDIRECTDRAWSURFACE4) PURE;
//  STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT) PURE;
//  STDMETHOD(Blt)(THIS_ LPRECT,DX::LPDIRECTDRAWSURFACE4, LPRECT,DWORD, DX::LPDDBLTFX) PURE;
//  STDMETHOD(BltBatch)(THIS_ DX::LPDDBLTBATCH, DWORD, DWORD ) PURE;
//  STDMETHOD(BltFast)(THIS_ DWORD,DWORD,DX::LPDIRECTDRAWSURFACE4, LPRECT,DWORD) PURE;
//  STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD,DX::LPDIRECTDRAWSURFACE4) PURE;
//  STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID,DX::LPDDENUMSURFACESCALLBACK2) PURE;
//  STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD,LPVOID,DX::LPDDENUMSURFACESCALLBACK2) PURE;
//  STDMETHOD(Flip)(THIS_ DX::LPDIRECTDRAWSURFACE4, DWORD) PURE;
//  STDMETHOD(GetAttachedSurface)(THIS_ DX::LPDDSCAPS2, DX::LPDIRECTDRAWSURFACE4 FAR *) PURE;
//  STDMETHOD(GetBltStatus)(THIS_ DWORD) PURE;
//  STDMETHOD(GetCaps)(THIS_ DX::LPDDSCAPS2) PURE;
//  STDMETHOD(GetClipper)(THIS_ DX::LPDIRECTDRAWCLIPPER FAR*) PURE;
//  STDMETHOD(GetColorKey)(THIS_ DWORD, DX::LPDDCOLORKEY) PURE;
//  STDMETHOD(GetDC)(THIS_ HDC FAR *) PURE;
//  STDMETHOD(GetFlipStatus)(THIS_ DWORD) PURE;
//  STDMETHOD(GetOverlayPosition)(THIS_ LPLONG, LPLONG ) PURE;
//  STDMETHOD(GetPalette)(THIS_ DX::LPDIRECTDRAWPALETTE FAR*) PURE;
//  STDMETHOD(GetPixelFormat)(THIS_ DX::LPDDPIXELFORMAT) PURE;
//  STDMETHOD(GetSurfaceDesc)(THIS_ DX::LPDDSURFACEDESC2) PURE;
//  STDMETHOD(Initialize)(THIS_ DX::LPDIRECTDRAW, DX::LPDDSURFACEDESC2) PURE;
//  STDMETHOD(IsLost)(THIS) PURE;
//  STDMETHOD(Lock)(THIS_ LPRECT,DX::LPDDSURFACEDESC2,DWORD,HANDLE) PURE;
//  STDMETHOD(ReleaseDC)(THIS_ HDC) PURE;
//  STDMETHOD(Restore)(THIS) PURE;
//  STDMETHOD(SetClipper)(THIS_ DX::LPDIRECTDRAWCLIPPER) PURE;
//  STDMETHOD(SetColorKey)(THIS_ DWORD, DX::LPDDCOLORKEY) PURE;
//  STDMETHOD(SetOverlayPosition)(THIS_ LONG, LONG ) PURE;
//  STDMETHOD(SetPalette)(THIS_ DX::LPDIRECTDRAWPALETTE) PURE;
//  STDMETHOD(Unlock)(THIS_ LPRECT) PURE;
//  STDMETHOD(UpdateOverlay)(THIS_ LPRECT, DX::LPDIRECTDRAWSURFACE4,LPRECT,DWORD, DX::LPDDOVERLAYFX) PURE;
//  STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD) PURE;
//  STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD, DX::LPDIRECTDRAWSURFACE4) PURE;
    /*** Added in the v2 interface ***/
//  STDMETHOD(GetDDInterface)(THIS_ LPVOID FAR *) PURE;
//  STDMETHOD(PageLock)(THIS_ DWORD) PURE;
//  STDMETHOD(PageUnlock)(THIS_ DWORD) PURE;
    /*** Added in the v3 interface ***/
//  STDMETHOD(SetSurfaceDesc)(THIS_ DX::LPDDSURFACEDESC2, DWORD) PURE;
    /*** Added in the v4 interface ***/
//  STDMETHOD(SetPrivateData)(THIS_ REFGUID, LPVOID, DWORD, DWORD) PURE;
//  STDMETHOD(GetPrivateData)(THIS_ REFGUID, LPVOID, LPDWORD) PURE;
//  STDMETHOD(FreePrivateData)(THIS_ REFGUID) PURE;
//  STDMETHOD(GetUniquenessValue)(THIS_ LPDWORD) PURE;
//  STDMETHOD(ChangeUniquenessValue)(THIS) PURE;
};}


namespace D3D9C{
class IDirectDrawSurface7 : public DDRAW::IDirectDrawSurface7
{
	void dirtying_texture();

	HRESULT flip(); //Flip/Blt subroutine

DDRAW_INTRAFACE(IDirectDrawSurface7)

	/*** IUnknown methods ***/
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    /*** IDirectDrawSurface methods ***/
    STDMETHOD(AddAttachedSurface)(THIS_ DX::LPDIRECTDRAWSURFACE7) PURE;
//  STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT) PURE;
	STDMETHOD(Blt)(THIS_ LPRECT,DX::LPDIRECTDRAWSURFACE7, LPRECT,DWORD, DX::LPDDBLTFX) PURE;
//  STDMETHOD(BltBatch)(THIS_ DX::LPDDBLTBATCH, DWORD, DWORD ) PURE;
    STDMETHOD(BltFast)(THIS_ DWORD,DWORD,DX::LPDIRECTDRAWSURFACE7, LPRECT,DWORD) PURE;
    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD,DX::LPDIRECTDRAWSURFACE7) PURE;
//  STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID,DX::LPDDENUMSURFACESCALLBACK7) PURE;
//  STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD,LPVOID,DX::LPDDENUMSURFACESCALLBACK7) PURE;
    STDMETHOD(Flip)(THIS_ DX::LPDIRECTDRAWSURFACE7, DWORD) PURE;
    STDMETHOD(GetAttachedSurface)(THIS_ DX::LPDDSCAPS2, DX::LPDIRECTDRAWSURFACE7 FAR *) PURE;
//  STDMETHOD(GetBltStatus)(THIS_ DWORD) PURE;
//  STDMETHOD(GetCaps)(THIS_ DX::LPDDSCAPS2) PURE;
//  STDMETHOD(GetClipper)(THIS_ DX::LPDIRECTDRAWCLIPPER FAR*) PURE;
    STDMETHOD(GetColorKey)(THIS_ DWORD, DX::LPDDCOLORKEY) PURE;
    STDMETHOD(GetDC)(THIS_ HDC FAR *) PURE;
//  STDMETHOD(GetFlipStatus)(THIS_ DWORD) PURE;
//  STDMETHOD(GetOverlayPosition)(THIS_ LPLONG, LPLONG ) PURE;
//  STDMETHOD(GetPalette)(THIS_ DX::LPDIRECTDRAWPALETTE FAR*) PURE;
	STDMETHOD(GetPixelFormat)(THIS_ DX::LPDDPIXELFORMAT) PURE;
    STDMETHOD(GetSurfaceDesc)(THIS_ DX::LPDDSURFACEDESC2) PURE;
//  STDMETHOD(Initialize)(THIS_ DX::LPDIRECTDRAW, DX::LPDDSURFACEDESC2) PURE;
    STDMETHOD(IsLost)(THIS) PURE;
	STDMETHOD(Lock)(THIS_ LPRECT,DX::LPDDSURFACEDESC2,DWORD,HANDLE) PURE;
    STDMETHOD(ReleaseDC)(THIS_ HDC) PURE;
    STDMETHOD(Restore)(THIS) PURE;
    STDMETHOD(SetClipper)(THIS_ DX::LPDIRECTDRAWCLIPPER) PURE;
	STDMETHOD(SetColorKey)(THIS_ DWORD, DX::LPDDCOLORKEY) PURE;
//  STDMETHOD(SetOverlayPosition)(THIS_ LONG, LONG ) PURE;
	STDMETHOD(SetPalette)(THIS_ DX::LPDIRECTDRAWPALETTE) PURE;
	STDMETHOD(Unlock)(THIS_ LPRECT) PURE;
//  STDMETHOD(UpdateOverlay)(THIS_ LPRECT, DX::LPDIRECTDRAWSURFACE7,LPRECT,DWORD, DX::LPDDOVERLAYFX) PURE;
//  STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD) PURE;
//  STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD, DX::LPDIRECTDRAWSURFACE7) PURE;
    /*** Added in the v2 interface ***/
//  STDMETHOD(GetDDInterface)(THIS_ LPVOID FAR *) PURE;
//  STDMETHOD(PageLock)(THIS_ DWORD) PURE;
//  STDMETHOD(PageUnlock)(THIS_ DWORD) PURE;
    /*** Added in the v3 interface ***/
//  STDMETHOD(SetSurfaceDesc)(THIS_ DX::LPDDSURFACEDESC2, DWORD) PURE;
    /*** Added in the v4 interface ***/
//  STDMETHOD(SetPrivateData)(THIS_ REFGUID, LPVOID, DWORD, DWORD) PURE;
//  STDMETHOD(GetPrivateData)(THIS_ REFGUID, LPVOID, LPDWORD) PURE;
//  STDMETHOD(FreePrivateData)(THIS_ REFGUID) PURE;
//  STDMETHOD(GetUniquenessValue)(THIS_ LPDWORD) PURE;
//  STDMETHOD(ChangeUniquenessValue)(THIS) PURE;
    /*** Moved Texture7 methods here ***/
//  STDMETHOD(SetPriority)(THIS_ DWORD) PURE;
//  STDMETHOD(GetPriority)(THIS_ LPDWORD) PURE;
//  STDMETHOD(SetLOD)(THIS_ DWORD) PURE;
//  STDMETHOD(GetLOD)(THIS_ LPDWORD) PURE;
};}

namespace D3D9C{
class IDirect3D3 : public DDRAW::IDirect3D3
{
DDRAW_INTRAFACE(IDirect3D3) //public

    /*** IUnknown methods ***/
//  STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
//  STDMETHOD_(ULONG,AddRef)(THIS) PURE;
//  STDMETHOD_(ULONG,Release)(THIS) PURE;
    /*** IDirect3D3 methods ***/
//  STDMETHOD(EnumDevices)(THIS_ DX::LPD3DENUMDEVICESCALLBACK,LPVOID) PURE;
//  STDMETHOD(CreateLight)(THIS_ DX::LPDIRECT3DLIGHT*,LPUNKNOWN) PURE;
//  STDMETHOD(CreateMaterial)(THIS_ DX::LPDIRECT3DMATERIAL3*,LPUNKNOWN) PURE;
//  STDMETHOD(CreateViewport)(THIS_ DX::LPDIRECT3DVIEWPORT3*,LPUNKNOWN) PURE;
//  STDMETHOD(FindDevice)(THIS_ DX::LPD3DFINDDEVICESEARCH,DX::LPD3DFINDDEVICERESULT) PURE;
//  STDMETHOD(CreateDevice)(THIS_ REFCLSID,DX::LPDIRECTDRAWSURFACE4,DX::LPDIRECT3DDEVICE3*,LPUNKNOWN) PURE;
//  STDMETHOD(CreateVertexBuffer)(THIS_ DX::LPD3DVERTEXBUFFERDESC,DX::LPDIRECT3DVERTEXBUFFER*,DWORD,LPUNKNOWN) PURE;
//  STDMETHOD(EnumZBufferFormats)(THIS_ REFCLSID,DX::LPD3DENUMPIXELFORMATSCALLBACK,LPVOID) PURE;
//  STDMETHOD(EvictManagedTextures)(THIS) PURE;
};}

namespace D3D9C{
class IDirect3D7 : public DDRAW::IDirect3D7
{
DDRAW_INTRAFACE(IDirect3D7) //public

    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3D7 methods ***/
    STDMETHOD(EnumDevices)(THIS_ DX::LPD3DENUMDEVICESCALLBACK7,LPVOID) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFCLSID,DX::LPDIRECTDRAWSURFACE7,DX::LPDIRECT3DDEVICE7*) PURE;
	STDMETHOD(CreateVertexBuffer)(THIS_ DX::LPD3DVERTEXBUFFERDESC,DX::LPDIRECT3DVERTEXBUFFER7*,DWORD) PURE;
	STDMETHOD(EnumZBufferFormats)(THIS_ REFCLSID,DX::LPD3DENUMPIXELFORMATSCALLBACK,LPVOID) PURE;
//  STDMETHOD(EvictManagedTextures)(THIS) PURE;	 
};}

namespace D3D9C{
class IDirect3DDevice3 : public DDRAW::IDirect3DDevice3
{
DDRAW_INTRAFACE(IDirect3DDevice3) //public
	
    /*** IUnknown methods ***/
//  STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
//  STDMETHOD_(ULONG,AddRef)(THIS) PURE;
//  STDMETHOD_(ULONG,Release)(THIS) PURE;
	/*** IDirect3DDevice3 methods ***/
//  STDMETHOD(GetCaps)(THIS_ DX::LPD3DDEVICEDESC,DX::LPD3DDEVICEDESC) PURE;
//  STDMETHOD(GetStats)(THIS_ DX::LPD3DSTATS) PURE;
//  STDMETHOD(AddViewport)(THIS_ DX::LPDIRECT3DVIEWPORT3) PURE;
//  STDMETHOD(DeleteViewport)(THIS_ DX::LPDIRECT3DVIEWPORT3) PURE;
//  STDMETHOD(NextViewport)(THIS_ DX::LPDIRECT3DVIEWPORT3,DX::LPDIRECT3DVIEWPORT3*,DWORD) PURE;
//  STDMETHOD(EnumTextureFormats)(THIS_ DX::LPD3DENUMPIXELFORMATSCALLBACK,LPVOID) PURE;
//  STDMETHOD(BeginScene)(THIS) PURE;
//  STDMETHOD(EndScene)(THIS) PURE;
//  STDMETHOD(GetDirect3D)(THIS_ DX::LPDIRECT3D3*) PURE;
//  STDMETHOD(SetCurrentViewport)(THIS_ DX::LPDIRECT3DVIEWPORT3) PURE;
//  STDMETHOD(GetCurrentViewport)(THIS_ DX::LPDIRECT3DVIEWPORT3 *) PURE;
//  STDMETHOD(SetRenderTarget)(THIS_ DX::LPDIRECTDRAWSURFACE4,DWORD) PURE;
//  STDMETHOD(GetRenderTarget)(THIS_ DX::LPDIRECTDRAWSURFACE4 *) PURE;
//  STDMETHOD(Begin)(THIS_ DX::D3DPRIMITIVETYPE,DWORD,DWORD) PURE;
//  STDMETHOD(BeginIndexed)(THIS_ DX::D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,DWORD) PURE;
//  STDMETHOD(Vertex)(THIS_ LPVOID) PURE;
//  STDMETHOD(Index)(THIS_ WORD) PURE;
//  STDMETHOD(End)(THIS_ DWORD) PURE;
//  STDMETHOD(GetRenderState)(THIS_ DX::D3DRENDERSTATETYPE,LPDWORD) PURE;
//  STDMETHOD(SetRenderState)(THIS_ DX::D3DRENDERSTATETYPE,DWORD) PURE;
//  STDMETHOD(GetLightState)(THIS_ DX::D3DLIGHTSTATETYPE,LPDWORD) PURE;
//  STDMETHOD(SetLightState)(THIS_ DX::D3DLIGHTSTATETYPE,DWORD) PURE;
//  STDMETHOD(SetTransform)(THIS_ DX::D3DTRANSFORMSTATETYPE,DX::LPD3DMATRIX) PURE;
//  STDMETHOD(GetTransform)(THIS_ DX::D3DTRANSFORMSTATETYPE,DX::LPD3DMATRIX) PURE;
//  STDMETHOD(MultiplyTransform)(THIS_ DX::D3DTRANSFORMSTATETYPE,DX::LPD3DMATRIX) PURE;
//  STDMETHOD(DrawPrimitive)(THIS_ DX::D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,DWORD) PURE;
//  STDMETHOD(DrawIndexedPrimitive)(THIS_ DX::D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,LPWORD,DWORD,DWORD) PURE;
//  STDMETHOD(SetClipStatus)(THIS_ DX::LPD3DCLIPSTATUS) PURE;
//  STDMETHOD(GetClipStatus)(THIS_ DX::LPD3DCLIPSTATUS) PURE;
//  STDMETHOD(DrawPrimitiveStrided)(THIS_ DX::D3DPRIMITIVETYPE,DWORD,DX::LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,DWORD) PURE;
//  STDMETHOD(DrawIndexedPrimitiveStrided)(THIS_ D3DPRIMITIVETYPE,DWORD,LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,LPWORD,DWORD,DWORD) PURE;
//  STDMETHOD(DrawPrimitiveVB)(THIS_ DX::D3DPRIMITIVETYPE,DX::LPDIRECT3DVERTEXBUFFER,DWORD,DWORD,DWORD) PURE;
//  STDMETHOD(DrawIndexedPrimitiveVB)(THIS_ D3DPRIMITIVETYPE,LPDIRECT3DVERTEXBUFFER,LPWORD,DWORD,DWORD) PURE;
//  STDMETHOD(ComputeSphereVisibility)(THIS_ DX::LPD3DVECTOR,DX::LPD3DVALUE,DWORD,DWORD,LPDWORD) PURE;
//  STDMETHOD(GetTexture)(THIS_ DWORD,DX::LPDIRECT3DTEXTURE2 *) PURE;
//  STDMETHOD(SetTexture)(THIS_ DWORD,DX::LPDIRECT3DTEXTURE2) PURE;
//  STDMETHOD(GetTextureStageState)(THIS_ DWORD,DX::D3DTEXTURESTAGESTATETYPE,LPDWORD) PURE;
//  STDMETHOD(SetTextureStageState)(THIS_ DWORD,DX::D3DTEXTURESTAGESTATETYPE,DWORD) PURE;
//  STDMETHOD(ValidateDevice)(THIS_ LPDWORD) PURE;
};}

namespace D3D9C{
class IDirect3DDevice7 : public DDRAW::IDirect3DDevice7
{
	//TODO: I don't know that these ever should've been class members. they could 
	//be useful if external code wanted them but, but through dx.ddraw.h instead?
	public: //friend dx_d3d9c_backblt;
	static HRESULT drawprims(DX::D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,LPWORD=0,DWORD=0);
	static HRESULT drawprims2(DX::D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,LPWORD=0,DWORD=0);

DDRAW_INTRAFACE(IDirect3DDevice7) //public
	
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DDevice7 methods ***/
	STDMETHOD(GetCaps)(THIS_ DX::LPD3DDEVICEDESC7) PURE;
	STDMETHOD(EnumTextureFormats)(THIS_ DX::LPD3DENUMPIXELFORMATSCALLBACK,LPVOID) PURE;
	STDMETHOD(BeginScene)(THIS) PURE;
	STDMETHOD(EndScene)(THIS) PURE;
//	STDMETHOD(GetDirect3D)(THIS_ DX::LPDIRECT3D7*) PURE;
//	STDMETHOD(SetRenderTarget)(THIS_ DX::LPDIRECTDRAWSURFACE7,DWORD) PURE;
//	STDMETHOD(GetRenderTarget)(THIS_ DX::LPDIRECTDRAWSURFACE7 *) PURE;
	STDMETHOD(Clear)(THIS_ DWORD,DX::LPD3DRECT,DWORD,DX::D3DCOLOR,DX::D3DVALUE,DWORD) PURE;
	STDMETHOD(SetTransform)(THIS_ DX::D3DTRANSFORMSTATETYPE,DX::LPD3DMATRIX) PURE;
	STDMETHOD(GetTransform)(THIS_ DX::D3DTRANSFORMSTATETYPE,DX::LPD3DMATRIX) PURE;
	STDMETHOD(SetViewport)(THIS_ DX::LPD3DVIEWPORT7) PURE;
//	STDMETHOD(MultiplyTransform)(THIS_ DX::D3DTRANSFORMSTATETYPE,DX::LPD3DMATRIX) PURE;
	STDMETHOD(GetViewport)(THIS_ DX::LPD3DVIEWPORT7) PURE;
	STDMETHOD(SetMaterial)(THIS_ DX::LPD3DMATERIAL7) PURE;
	STDMETHOD(GetMaterial)(THIS_ DX::LPD3DMATERIAL7) PURE;
	STDMETHOD(SetLight)(THIS_ DWORD,DX::LPD3DLIGHT7) PURE;
//	STDMETHOD(GetLight)(THIS_ DWORD,DX::LPD3DLIGHT7) PURE;
	STDMETHOD(SetRenderState)(THIS_ DX::D3DRENDERSTATETYPE,DWORD) PURE;
	STDMETHOD(GetRenderState)(THIS_ DX::D3DRENDERSTATETYPE,LPDWORD) PURE;
//	STDMETHOD(BeginStateBlock)(THIS) PURE;
//	STDMETHOD(EndStateBlock)(THIS_ LPDWORD) PURE;
	STDMETHOD(PreLoad)(THIS_ DX::LPDIRECTDRAWSURFACE7) PURE;
	STDMETHOD(DrawPrimitive)(THIS_ DX::D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,DWORD) PURE;
	STDMETHOD(DrawIndexedPrimitive)(THIS_ DX::D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,LPWORD,DWORD,DWORD) PURE;
	STDMETHOD(SetClipStatus)(THIS_ DX::LPD3DCLIPSTATUS) PURE;
//	STDMETHOD(GetClipStatus)(THIS_ DX::LPD3DCLIPSTATUS) PURE;
//	STDMETHOD(DrawPrimitiveStrided)(THIS_ DX::D3DPRIMITIVETYPE,DWORD,DX::LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,DWORD) PURE;
//	STDMETHOD(DrawIndexedPrimitiveStrided)(THIS_ DX::D3DPRIMITIVETYPE,DWORD,DX::LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,LPWORD,DWORD,DWORD) PURE;
//	STDMETHOD(DrawPrimitiveVB)(THIS_ DX::D3DPRIMITIVETYPE,DX::LPDIRECT3DVERTEXBUFFER7,DWORD,DWORD,DWORD) PURE;
	STDMETHOD(DrawIndexedPrimitiveVB)(THIS_ DX::D3DPRIMITIVETYPE,DX::LPDIRECT3DVERTEXBUFFER7,DWORD,DWORD,LPWORD,DWORD,DWORD) PURE;
//	STDMETHOD(ComputeSphereVisibility)(THIS_ DX::LPD3DVECTOR,DX::LPD3DVALUE,DWORD,DWORD,LPDWORD) PURE;
	STDMETHOD(GetTexture)(THIS_ DWORD,DX::LPDIRECTDRAWSURFACE7 *) PURE;
	STDMETHOD(SetTexture)(THIS_ DWORD,DX::LPDIRECTDRAWSURFACE7) PURE;
	STDMETHOD(GetTextureStageState)(THIS_ DWORD,DX::D3DTEXTURESTAGESTATETYPE,LPDWORD) PURE;
	STDMETHOD(SetTextureStageState)(THIS_ DWORD,DX::D3DTEXTURESTAGESTATETYPE,DWORD) PURE;
//	STDMETHOD(ValidateDevice)(THIS_ LPDWORD) PURE;
	STDMETHOD(ApplyStateBlock)(THIS_ DWORD) PURE;
	STDMETHOD(CaptureStateBlock)(THIS_ DWORD) PURE;
	STDMETHOD(DeleteStateBlock)(THIS_ DWORD) PURE;
	STDMETHOD(CreateStateBlock)(THIS_ DX::D3DSTATEBLOCKTYPE,LPDWORD) PURE;
//	STDMETHOD(Load)(THIS_ DX::LPDIRECTDRAWSURFACE7,LPPOINT,DX::LPDIRECTDRAWSURFACE7,LPRECT,DWORD) PURE;
	STDMETHOD(LightEnable)(THIS_ DWORD,BOOL) PURE;
//	STDMETHOD(GetLightEnable)(THIS_ DWORD,BOOL*) PURE;
//	STDMETHOD(SetClipPlane)(THIS_ DWORD,DX::D3DVALUE*) PURE;
//	STDMETHOD(GetClipPlane)(THIS_ DWORD,DX::D3DVALUE*) PURE;
//	STDMETHOD(GetInfo)(THIS_ DWORD,LPVOID,DWORD) PURE;
};}		  

namespace D3D9C{
class IDirect3DVertexBuffer7 : public DDRAW::IDirect3DVertexBuffer7
{
DDRAW_INTRAFACE(IDirect3DVertexBuffer7) //public

    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DVertexBuffer7 methods ***/
	STDMETHOD(Lock)(THIS_ DWORD,LPVOID*,LPDWORD) PURE;
	STDMETHOD(Unlock)(THIS) PURE;
//	STDMETHOD(ProcessVertices)(THIS_ DWORD,DWORD,DWORD,DX::LPDIRECT3DVERTEXBUFFER7,DWORD,DX::LPDIRECT3DDEVICE7,DWORD) PURE;
//	STDMETHOD(GetVertexBufferDesc)(THIS_ DX::LPD3DVERTEXBUFFERDESC) PURE;
//	STDMETHOD(Optimize)(THIS_ DX::LPDIRECT3DDEVICE7,DWORD) PURE;
//	STDMETHOD(ProcessVerticesStrided)(THIS_ DWORD,DWORD,DWORD,DX::LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,DX::LPDIRECT3DDEVICE7,DWORD) PURE;
};}

#undef STDMETHOD_
#undef STDMETHOD
#undef PURE

//see: push_macro("PURE")
#pragma pop_macro("PURE") 
#pragma pop_macro("STDMETHOD")
#pragma pop_macro("STDMETHOD_")

#endif //DX_D3D9C_INCLUDED